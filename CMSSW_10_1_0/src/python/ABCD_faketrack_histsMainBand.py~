from ROOT import *
import sys
import numpy as np
from DataFormats.FWLite import Events, Handle
import scipy.constants as scc
import math
from glob import glob
from FWCore.ParameterSet.VarParsing import VarParsing
#from utilsII import *
from utilitiesII import *
gROOT.SetBatch()
gROOT.SetStyle('Plain')

####################
# this script Doesnt make sence for MBSR region in DATA But in MC we can Identify Fakes track by
# gen matching and get Fake rate (Alpha) closure from SB and MB.
###################
try: inputFileNames = sys.argv[1]
except:
    inputFileNames = "/pnfs/desy.de/cms/tier2/store/user/sbein/NtupleHub/Production2016v2/Summer16.DYJetsToLL_M-50_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_ext1_391_RA2AnalysisTree.root"
inputFiles = glob(inputFileNames)
x_ = len(inputFiles)
print 'going to analyze events in', inputFileNames

if 'Run20' in inputFileNames: isdata = True  # for DATA
else: isdata = False
verbose = False
if not isdata:
    if 'TTJets_TuneCUET' in inputFileNames:  madranges = [(0,600),(800,1200)]
    elif 'DYJetsToLL_M-50_TuneCUETP8M1' in inputFileNames: madranges = [(0, 100)]
    elif 'TTJets_HT' in inputFileNames: madranges = [(600,inf)]
    elif 'WJetsToLNu_TuneCUET' in inputFileNames: madranges = [(0, 100), (600,800)]
    elif 'WJetsToLNu_HT' in inputFileNames: madranges = [(100, inf)]
    else: madranges = [(0, inf)]


if not isdata: print 'Will Run on print madranges:' ,  madranges

def TriggerResult(trigger):
    for i, index in enumerate(trigger):
        print '\item '+ c.TriggerNames[index] #, c.TriggerPrescales[index], index
        continue
    pause()
#        if c.TriggerPass[index] ==1: return True
#    return False

#trigger names
ElectronTriggers = [14, 15, 16, 17, 18, 19, 20, 21]
MuonTriggers = [24,25,26,27,28,30,31,32]
MetTriggers = [53, 54, 55, 56, 57, 58, 59, 60 ,109,110,111,112,113,114,115,116,117,118,119,120,124,125,126,127,128,129,130,131,132,133,134,135,136] #[53, 54, 55, 56, 57, 58, 59, 60]

fMask = TFile('/nfs/dust/cms/user/singha/LLCh/BACKGROUNDIII/CMSSW_10_1_0/src/usefulfiles/Mask6mar.root')
if isdata : hMask = fMask.Get('hEtaVsPhiDT_maskData-2016Data-2016')
else : hMask = ''

c = TChain("TreeMaker2/PreSelection")

pdgIDs = [0, 11, 13, 15, 100, 'other', 'all']
track_category = ['inclusive', 'small','medium','long']
trkVars = ['Pt', 'eta','dxy','dz','sumNpt','rsumNpt','sumCpt','rsumCpt','calodep','rIso','ohits','mihits','length','pterr']
eventVars = ['Pt','MET','HT','MHT','dPhiMin','dPhiMax','dPhimaxjets','dPhijet1','dPhi','mhtdPhi','R','mhtR','nJets','nbJets','nDtrks','nVtx']
Dvars = ['PtVSdPhi', 'METVSdPhi','PtVSR', 'METVSR', 'RVSdPhi']
regionkeys = ['MBSRnum', 'MBCRden']
eventVarsCuts = [200, 250,0,0,1,0]
dBkgComposition2DHist = {}
dBkgCompositionHist = {}
hHt                          = TH1F("hHt","HT for number of events", 150,0,2500)
hHtWeighted                  = TH1F("hHtWeighted","HT for number of events", 250,0,5000)
hbkgID                       = TH1F("hbkgID", "background pdgID", 50, -25, 25)
for ipdg, pdg in enumerate(pdgIDs):
    for icategory, category in enumerate(track_category):
        for iregion, regionkey in enumerate(regionkeys):
            for ivar, var in enumerate(eventVars):
                newHistKey = 'Bkg'+category+'_'+var+'_'+regionkey+'_'+str(pdg)
                print newHistKey
                if '_Pt_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, len(PtBinEdges)-1,np.asarray(PtBinEdges, 'd'))
                if '_MHT_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, len(MHTBinEdges)-1,np.asarray(MHTBinEdges, 'd'))
                if '_MET_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, len(METBinEdges)-1,np.asarray(METBinEdges, 'd'))
                if '_HT_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, len(HTBinEdges)-1,np.asarray(HTBinEdges, 'd'))
                if '_nJets_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, len(JetBinEdges)-1,np.asarray(JetBinEdges, 'd'))
                if '_nbJets_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, len(JetBinEdges)-1,np.asarray(JetBinEdges, 'd'))
                if '_dPhi_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, 40, -0.001, 3.2)
                if '_mhtdPhi_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, 40, -0.001, 3.2)
                if '_dPhiMin_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, 40, -0.001, 3.2)
                if '_dPhiMax_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, 40, -0.001, 3.2)
                if '_dPhimaxjets_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, 40, -0.001, 3.2)
                if '_dPhijet1_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, 40, -0.001, 3.2)
                if '_R_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, 20, -0.001, 3)
                if '_mhtR_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, 20, -0.001, 3)
                if '_nDtrks_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, 4, 0, 4)
                if '_nVtx_' in newHistKey: dBkgCompositionHist[newHistKey] = TH1F(newHistKey, newHistKey, 20, 0, 80)
                histoStyler(dBkgCompositionHist[newHistKey], 1)

            for iDvar, Dvar in enumerate(Dvars):
                new2DHistKey = 'Bkg'+category+Dvar+regionkey+'_'+str(pdg)
                if 'PtVSdPhi' in new2DHistKey: dBkgComposition2DHist[new2DHistKey] = TH2D(new2DHistKey,new2DHistKey , len(PtBinEdges)-1,np.asarray(PtBinEdges, 'd'), 40, -0.001, 3.2)
                if 'METVSdPhi' in new2DHistKey: dBkgComposition2DHist[new2DHistKey] = TH2D(new2DHistKey,new2DHistKey , len(METBinEdges)-1,np.asarray(METBinEdges, 'd'), 40, -0.001, 3.2)
                if 'PtVSR' in new2DHistKey: dBkgComposition2DHist[new2DHistKey] = TH2D(new2DHistKey,new2DHistKey , len(PtBinEdges)-1,np.asarray(PtBinEdges, 'd'), 20, -0.001, 3)
                if 'METVSR' in new2DHistKey: dBkgComposition2DHist[new2DHistKey] = TH2D(new2DHistKey,new2DHistKey , len(METBinEdges)-1,np.asarray(METBinEdges, 'd'), 20, -0.001, 3)
                if 'RVSdPhi' in new2DHistKey: dBkgComposition2DHist[new2DHistKey] = TH2D(new2DHistKey,new2DHistKey ,  20, -0.001, 3, 40, -0.001, 3.2)

for f in inputFiles:
    print 'adding file:', f
    c.Add(f)
nentries = c.GetEntries()
c.Show(0)
print nentries, ' events to be analyzed'
verbosity = 10000
identifier = inputFiles[0][inputFiles[0].rfind('/')+1:].replace('.root','').replace('Summer16.','').replace('RA2AnalysisTree','')
identifier+='nFiles'+str(len(inputFiles))

Pt_threshold = 30
def main():
#eventPreselection
#    if not (c.HT > 250 and c.MHT > 250 and c. ):continue # uncomment for main band
    for ientry in range(nentries):
        TriggerResult(MetTriggers)
        pause()
        if isdata:
            for itrig in range(len(c.TriggerPass)):
                print  'Trigger:' , c.TriggerNames[itrig] , c.TriggerPrescales[itrig], itrig #'triindex', itrig, 'name',                                           
                print '*='*10
        pause()



        if verbose:
            if not ientry in [670]: continue
        if ientry%verbosity==0: print 'now processing event number', ientry, 'of', nentries
        c.GetEntry(ientry)
        if isdata: weight = 1
        else: weight = c.CrossSection
        fillth1(hHt, c.HT, 1)
        fillth1(hHtWeighted, c.HT, weight)
#        print 'going for kinematics cuts'
#        print 'passed Kinematics Cuts'
        if not isdata:
            if weight ==1: isValidHtRange = True
            else: isValidHtRange = False
            for madrange in madranges:
                if (c.madHT>madrange[0] and c.madHT<madrange[1]):
                    isValidHtRange = True
                    break
            if not isValidHtRange: continue
        if not passesUniversalSelection(c): continue
        if leptonVeto() == False: continue
#        if not passesLepveto(c): continue
#        print 'passed all selections'
        if isdata:
            if TriggerResult(MetTriggers) == False: continue
        if not isdata:
            if not (c.HT > 200 and c.MHT > 200):continue
        track_type = 'Nil'
        region = 'Nil'
        nDtrk = 0
        basicTracks = []
        disappearingTracks = [] # fill as trk, trkID, track length
        gen_pdgID = -99 # gen Id of Bkg track        
        for itrack, track in enumerate(c.tracks):
            length = 0
            S = 0
            M = 0
            L = 0
            if not (track.Pt() > 20): continue
            if (abs(track.Eta()) > 1.4442 and abs(track.Eta()) < 1.566): continue
            if abs(track.Eta()) > 2.4 : continue
            if c.tracks_pixelLayersWithMeasurement[itrack] == c.tracks_trackerLayersWithMeasurement[itrack]:
                S = 1
                length = 1
            if c.tracks_trackerLayersWithMeasurement[itrack] < 7 and c.tracks_pixelLayersWithMeasurement[itrack] < c.tracks_trackerLayersWithMeasurement[itrack] :
                M = 1
                length = 3
            if c.tracks_trackerLayersWithMeasurement[itrack] > 6 and c.tracks_pixelLayersWithMeasurement[itrack] < c.tracks_trackerLayersWithMeasurement[itrack]:
                L = 1
                length = 5
            if not isNminusOneBaselineTrack(track, itrack, c, hMask): continue
            if not track.Pt() < 9999: continue
            basicTracks.append([track,c.tracks_charge[itrack], itrack])
            if not track.Pt() > Pt_threshold : continue
            if not isDisappearingTrack_(track, itrack, c): continue  #in principle it is N minus one disappearing track
            drlep = 99
            print 'Passed N -1 disappearing track'
            passeslep = True  # checking lepton overlap
            for ilep, lep in enumerate(list(c.Electrons)+list(c.Muons)+list(c.TAPPionTracks)):
                drlep = min(drlep, lep.DeltaR(track))
                if drlep<0.01:
                    passeslep = False
                    break
            if not passeslep: continue
            print 'cant pass leppass'
            if abs(c.tracks_dxyVtx[itrack]) < 0.01: region = 'MBSRnum' # doesnt make sence for DATA 
            if ((abs(c.tracks_dxyVtx[itrack]) > 0.02) and (abs(c.tracks_dxyVtx[itrack]) < 0.1)) : region = 'MBCRden'
            if region == 'Nil': continue     # disappearing track definition ends here, track end up either in CR or SR 
            print region
            disappearingTracks.append([track,itrack])
            if len(disappearingTracks) == 1: 
                if isdata :gen_pdgID = 0
                else: gen_pdgID = getGenID(track)
                if length == 1: track_type = 'small' #'inclusive'
                if length == 3: track_type = 'medium' #'inclusive'
                if length == 5: track_type = 'long' #'inclusive'
            else: gen_pdgID = 100
        
        trkTlvsum = TLorentzVector()
        trkTlvsum.SetPxPyPzE(0, 0, 0, 0)
        if len(disappearingTracks) > 0:
            nDtrk = len(disappearingTracks)
            for idtrk, dtrk in enumerate(disappearingTracks):
                trkTlvsum = trkTlvsum + dtrk[0]

            Njets  = nJets(disappearingTracks)
            MHT = getMht(disappearingTracks)
            HT = getHt(disappearingTracks)
            NBjets = nbJets(disappearingTracks)
            deltaPhi = math.acos(math.cos((c.METPhi-trkTlvsum.Phi())))
            mhtdeltaPhi = math.acos(math.cos((MHT.Phi()-trkTlvsum.Phi())))
#            print 'the dPhi for this particle is', deltaPhi
#            if not deltaPhi < 2.5 : continue
            DPt  = 2*(abs(c.MET-trkTlvsum.Pt())/(c.MET+trkTlvsum.Pt()))
            mhtDPt  = 2*(abs(MHT.Pt()-trkTlvsum.Pt())/(MHT.Pt()+trkTlvsum.Pt()))
            mindphi = minDeltaPhi(c.METPhi)
            maxdphi = maxDeltaPhi(c.METPhi)
            maxdphijets = DeltaPhiJets()
            dphijet1 = DeltaPhiJet1(c.METPhi)
            if not (Njets > 0 and HT > 250 and MHT.Pt() > 250): continue
# eventVars = ['Pt','MET','HT','MHT','dPhiMin','dPhiMax','dPhimaxjets','dPhijet1','dPhi','R','nJets','nbJets','nDtrks']
            fveventVar = [trkTlvsum.Pt(), c.MET, HT, MHT, mindphi, maxdphi, maxdphijets, dphijet1, deltaPhi, mhtdeltaPhi, DPt, mhtDPt, Njets, NBjets, nDtrk, c.nAllVertices]
# Dvars = ['PtVSdPhi', 'METVSdPhi','PtVSR', 'METVSR', 'RVSdPhi']
            fvDvar = [[trkTlvsum.Pt(),deltaPhi], [c.MET, deltaPhi], [trkTlvsum.Pt(), DPt], [c.MET , DPt], [DPt, deltaPhi]]
            print region
            fillBkgCompositionHist(fveventVar, fvDvar, gen_pdgID, weight, track_type, region)
#        else: continue

    fnew = TFile('MB_FakeHists_'+identifier+'.root','recreate')
    hHt.Write()
    hHtWeighted.Write()
    hbkgID.Write()
    for histkey in dBkgCompositionHist: dBkgCompositionHist[histkey].Write()
    for Dhistkey in dBkgComposition2DHist: dBkgComposition2DHist[Dhistkey].Write()
    print "just created" , fnew.GetName()
    fnew.Close()


def leptonVeto():

    flag = True
    nleptons = 0
    for imu, mu in enumerate(c.Muons):
        if abs(mu.Eta()) > 2.4: continue
        if (abs(mu.Eta()) > 1.445 and abs(mu.Eta()) < 1.56): continue
        if not mu.Pt() > 30:continue
        if not c.Muons_passIso[imu]: continue
        nleptons = nleptons + 1
    for iele, electron in enumerate(c.Electrons):
        if abs(electron.Eta()) > 2.4:continue
        if (abs(electron.Eta()) > 1.445 and abs(electron.Eta()) < 1.56): continue
        if not electron.Pt() > 30:continue
        if not c.Electrons_passIso[iele]: continue
        if not c.Electrons_mediumID[iele]: continue
        nleptons = nleptons + 1
    if nleptons > 0 : flag = False
    return flag

def getGenID(track):
    drsmall = 0.2
    gen_id = 0
    for igen, gen in enumerate(c.GenParticles):
        if not ((c.GenParticles_Status[igen] == 1) or (abs(c.GenParticles_PdgId[igen]) == 15)) : continue
        if gen.Pt() < 15:continue
        dr = gen.DeltaR(track)
        if dr < drsmall:
            drsmall = dr
            gen_id  = abs(c.GenParticles_PdgId[igen]) 
    if drsmall < 0.01: return gen_id
    else : return 0

def minDeltaPhi(METPhi):  #between MET and any of Jets
    deltaPhi = 10
    for ijet, jet in enumerate(c.Jets):
        if not (abs(jet.Eta() < 2.4) and jet.Pt() > 30): continue
        deltaPhi_temp = math.acos(math.cos((METPhi-jet.Phi())))
        if deltaPhi > deltaPhi_temp: deltaPhi = deltaPhi_temp
    return deltaPhi

def maxDeltaPhi(METPhi): # between MET and any of jets
    deltaPhi = -10
    for ijet, jet in enumerate(c.Jets):
        if not (abs(jet.Eta() < 2.4) and jet.Pt() > 30): continue
        deltaPhi_temp = math.acos(math.cos((METPhi-jet.Phi())))
        if deltaPhi < deltaPhi_temp: deltaPhi = deltaPhi_temp
    return deltaPhi

def DeltaPhiJets():
    deltaPhi = -10
    for ijet1, jet1 in enumerate(c.Jets):
        if not (abs(jet1.Eta() < 2.4) and jet1.Pt() > 30): continue
        for ijet2, jet2 in enumerate(c.Jets):
            if ijet1 == ijet2: continue
            deltaPhi_temp = math.acos(math.cos((jet1.Phi()-jet2.Phi())))
            if deltaPhi < deltaPhi_temp: deltaPhi = deltaPhi_temp
    return deltaPhi

    
def DeltaPhiJet1(METPhi):
    jet_leading = TLorentzVector()
    jet_leading.SetPtEtaPhiE(0,0,0,0)
    Pt_leading = 0
    deltaPhi = 0
    for ijet, jet in enumerate(c.Jets):
        if not (abs(jet.Eta() < 2.4) and jet.Pt() > 30): continue
        if Pt_leading < jet.Pt():  
            Pt_leading = jet.Pt()
            jet_leading = jet
    if Pt_leading > 0 : deltaPhi = math.acos(math.cos((METPhi-jet.Phi())))
    return deltaPhi

def nJets(tracklist):
    njets = 0
    for ijet, jet in enumerate(c.Jets):
        omitJet= False
        for itrack, track in enumerate(tracklist):
            if not jet.DeltaR(track[0])>0.04: omitJet= True
        if omitJet: continue
        if not c.Jets_ID[ijet]: continue
        if not (abs(jet.Eta() < 2.4) and jet.Pt() > 30): continue
        njets = njets + 1
    return njets

def getHt(tracklist):
    adjustedHt = 0
    for ijet, jet in enumerate(c.Jets):
        omitJet= False
        for itrack, track in enumerate(tracklist):
            if not jet.DeltaR(track[0])>0.04: omitJet= True
        if omitJet: continue
        if not c.Jets_ID[ijet]: continue
        if not jet.Pt()>30: continue
        if not abs(jet.Eta())<2.4: continue
        adjustedHt+=jet.Pt()
    return adjustedHt
    
def getMht(tracklist):
    adjustedMht = TLorentzVector()
    adjustedMht.SetPxPyPzE(0,0,0,0)
    for ijet, jet in enumerate(c.Jets):
        omitJet= False
        for itrack, track in enumerate(tracklist):
            if not jet.DeltaR(track[0])>0.04: omitJet= True
        if omitJet: continue
        if not c.Jets_ID[ijet]: continue
        if not jet.Pt()>30: continue
        if not abs(jet.Eta())< 5.0: continue
        adjustedMht-=jet
    return adjustedMht



def nbJets(tracklist):
    nbjets = 0
    csv_b = 0.8484
    for ijet, jet in enumerate(c.Jets):
        omitJet= False
        for itrack, track in enumerate(tracklist):
            if not jet.DeltaR(track[0])>0.04: omitJet= True
        if omitJet: continue
        if not c.Jets_ID[ijet]: continue
        if not (abs(jet.Eta() < 2.4) and jet.Pt() > 30): continue
        if not  c.Jets_bDiscriminatorCSV[ijet]>csv_b: continue
        nbjets =nbjets +1
    return nbjets

def fillBkgCompositionHist(Eventfv, Event2Dfv, pdgId, w, trk_type, regionkey):
    if pdgId in pdgIDs: pdgId = str(pdgId)
    else : pdgId = 'other'

    for ivar, var in enumerate(eventVars):
        
        histkey = 'Bkg'+trk_type+'_'+var+'_'+regionkey+'_'+pdgId
        fillth1(dBkgCompositionHist[histkey], Eventfv[ivar], w) 
        histkey_allParticles = 'Bkg'+trk_type+'_'+var+'_'+regionkey+'_all'
        fillth1(dBkgCompositionHist[histkey_allParticles], Eventfv[ivar], w)
#now fill the inclusive tracks
        histkey_inclusive = 'Bkg'+'inclusive'+'_'+var+'_'+regionkey+'_'+pdgId
        fillth1(dBkgCompositionHist[histkey_inclusive], Eventfv[ivar], w)
        histkey_inclusive_allParticles = 'Bkg'+'inclusive'+'_'+var+'_'+regionkey+'_all'
        fillth1(dBkgCompositionHist[histkey_inclusive_allParticles], Eventfv[ivar], w)
    for iDvar, Dvar in enumerate(Dvars):

        Dhistkey = 'Bkg'+trk_type+Dvar+regionkey+'_'+pdgId
        fillth2(dBkgComposition2DHist[Dhistkey], Event2Dfv[iDvar][0],Event2Dfv[iDvar][1], w)
        Dhistkey_allParticles = 'Bkg'+trk_type+Dvar+regionkey+'_all'
        fillth2(dBkgComposition2DHist[Dhistkey_allParticles], Event2Dfv[iDvar][0],Event2Dfv[iDvar][1], w)
#now fill the inclusive tracks                                                                                                                                               
        Dhistkey_inclusive = 'Bkg'+'inclusive'+Dvar+regionkey+'_'+pdgId
        fillth2(dBkgComposition2DHist[Dhistkey_inclusive], Event2Dfv[iDvar][0],Event2Dfv[iDvar][1], w)
        Dhistkey_inclusive_allParticles = 'Bkg'+'inclusive'+Dvar+regionkey+'_all'
        fillth2(dBkgComposition2DHist[Dhistkey_inclusive_allParticles], Event2Dfv[iDvar][0],Event2Dfv[iDvar][1], w)
    return True

main()


